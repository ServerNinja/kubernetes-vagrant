---
- hosts: all
  become: true
  tasks:
    - debug: 
        var: ansible_default_ipv4.address

    - name: Install required packages
      apt: 
        package:
        - apt-transport-https
        - ca-certificates
        - curl
        - wget
        - software-properties-common
        - gnupg2
        - glusterfs-client
        - iptables
        - arptables
        - ebtables
        - python3-pip
        state: present
      become: true

    - name: Download K8s PIP packages
      pip:
        name:
          - pyyaml
          - kubernetes 
          - openshift
      become: true

    ### Docker Packages ###
    - name: Install aptitude using apt
      apt: name=aptitude state=latest update_cache=yes force_apt_get=yes

    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu bionic stable
        state: present

    - name: Update apt and install docker-ce
      apt: update_cache=yes name=docker-ce state=latest

    - name: Docker daemon.json file
      copy:
        dest: /etc/docker/daemon.json
        content: |
          {
            "exec-opts": ["native.cgroupdriver=systemd"],
            "log-driver": "json-file",
            "log-opts": {
              "max-size": "100m"
            },
            "storage-driver": "overlay2"
          }
      register: docker_daemon_config

    - name: Restart Docker Service
      systemd:
        name: docker.service
        enabled: true
        state: restarted
      when: docker_daemon_config.changed

    - name: Start Docker Service
      systemd:
        name: docker.service
        enabled: true
        state: started
      when: not docker_daemon_config.changed

    ### Kubernetes Packages ###
    - name: Add the Google signing key
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present
      become: true

    - name: Add the k8s APT repo
      apt_repository:
        repo: 'deb http://apt.kubernetes.io/ kubernetes-xenial main'
        state: present
      become: true

    - name: Install K8s packages
      apt:
        package:
          - kubelet
          - kubeadm
          - kubectl
        state: present
        update_cache: true
        force: yes
      become: true

    - name: Enable Kubernetes Service
      systemd:
         name: kubelet.service
         enabled: true
      become: true

    - name: net bridge sysctl settings for weavenet
      sysctl:
        name: net.bridge.bridge-nf-call-iptables
        value: '1'
        sysctl_set: yes
        state: present
        reload: yes
      become: true

    - name: Disable SWAP since kubernetes can't work with swap enabled (1/2)
      shell: |
        swapoff -a
      become: true

    - name: Disable SWAP in fstab since kubernetes can't work with swap enabled (2/2)
      replace:
        path: /etc/fstab
        regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
        replace: '# \1'
      become: true


- hosts: masters
  become: true
  run_once: true
  tasks:
    - stat:
        path: /etc/kubernetes/pki/ca.key
      register: ca_key

    - name: Bring up master
      shell: |
        kubeadm init --apiserver-advertise-address={{ ansible_default_ipv4.address }} \
                     --control-plane-endpoint={{ ansible_default_ipv4.address }} \
                     --ignore-preflight-errors=NumCPU
      become: true
      when: not ca_key.stat.exists
      register: kubeadm_join

    - name: .kube dir
      file: 
        path: "/home/{{ deploy_user }}/.kube"
        state: directory
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
      become: true

    - name: Copy kubeconfig
      copy:
        src: /etc/kubernetes/admin.conf 
        dest: "/home/{{ deploy_user }}/.kube/config"
        remote_src: true
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
      become: true

    - name: Copy kubeconfig locally
      fetch:
        src: /etc/kubernetes/admin.conf 
        dest: "./"
        flat: true 
      become: true

    - name: Get kubectl Version from CMD Line
      shell: kubectl version | base64 | tr -d '\n'
      become: true
      register: kubectl_version

    - name: Configure WeaveNet
      shell: |
        KUBECONFIG=~/.kube/config kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"
      become_user: "{{ deploy_user }}"

    - name: Untaint Master Node
      shell: kubectl taint nodes --all node-role.kubernetes.io/master- || echo "Taint already removed"
      become_user: "{{ deploy_user }}"

    - name: Generate Kubectl Join Command
      shell: |
        kubeadm token create --print-join-command
      become_user: "{{ deploy_user }}"
      register: kubeadm_join_cmd

#    - name: Generate Kubectl Join Token
#      shell: |
#        kubeadm token generate
#      become_user: "{{ deploy_user }}"
#      register: kubeadm_join_token
#
#    - name: Grab token ca-cert hash
#      shell: |
#        openssl x509 -in /etc/kubernetes/pki/ca.crt -pubkey -noout | openssl pkey -pubin -outform DER | openssl dgst -sha256 | cut -d " " -f 2
#      register: kubeadm_join_hash

    - name: "Add K8S generated join information to a dummy host"
      add_host:
        name:   "K8S_JOIN_CMD_HOLDER"
        joincmd: "{{ kubeadm_join_cmd.stdout }}"
#        kubeip: "{{ ansible_default_ipv4.address }}"
#        token: "{{ kubeadm_join_token.stdout }}"
#        hash: "{{ kubeadm_join_hash.stdout }}"

- hosts: workers
  become: true

  tasks:
    - stat:
        path: /etc/kubernetes/pki/ca.crt
      register: ca_key

    - name: "Join node with Kubectl"
      shell: |
        {{ hostvars['K8S_JOIN_CMD_HOLDER']['joincmd'] }}
      when: not ca_key.stat.exists

#    - name: "Join node with Kubectl"
#      shell: |
#        kubeadm join {{ hostvars['K8S_JOIN_CMD_HOLDER']['kubeip'] }}:6443 \
#          --token {{ hostvars['K8S_JOIN_CMD_HOLDER']['token'] }} \
#          --discovery-token-ca-cert-hash sha256:{{ hostvars['K8S_JOIN_CMD_HOLDER']['hash'] }}
#      when: not ca_key.stat.exists
